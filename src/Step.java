import java.io.IOException;
import java.io.Serializable;
import java.util.Scanner;

//узел игры
public class Step implements Serializable {
    private String name;
    private String title;
    private String text;
    private String nextFirst;//первый вариант
    private String nextSecond;//второй вариант

    //для создания узла передаем только его имя, остальные параметры выбираем в зависимости от имени
    //узлы создаются по мере необходимости
    public Step(String name)  {
        this.name=name;
        switch (name) {
            case "goHome":
                setStep("Вернуться домой",
                        "Вернувшись домой, Лисёнок нашёл там Бельчонка. Оказалось, что Бельчонок пришёл \n" +
                                "на место встречи раньше и увидел там рой злобных пчел. Он поспешил предупредить об этом Лисёнка,\n " +
                                "но они разминулись. Наконец-то друзья нашли друг друга! Игра завершилась успехом", null, null);
                break;

            case "searchSquirrel":
                setStep("Искать Бельчонка в одиночку",
                        "Лисёнок слишком долго плутал по лесу в поисках друга и сам не заметил, как заблудился.\n " +
                                "Теперь его самого нужно искать. Игра завершилась неудачей",
                        null, null);
                break;

            case "stealHoney":
                setStep("Нужно попытаться выкрасть мед немедленно",
                        "Это была не лучшая идея. Пчёлы покусали Лисёнка, теперь ему самому нужна помощь. \n" +
                                "Игра закончилась неудачей",
                        null, null);
                break;

            case "honeyForBear":
                setStep("Скорее отнести мёд Медвежонку",
                        "Довольный Медвежонок рассказал Лисёнку, что очень хорошо знает семью Белок и уверен,\n " +
                                "что Бельчонок никогда не пошёл бы в глубь леса. Он заверял Лисёнка, что Белки не попадают\n " +
                                "в неприятности, и что Совам нельзя верить, он также уговаривал Лисёнка вернуться домой.\n" +
                                "1. Межвежонок ничего не знает, нужно продолжить поиски->Искать Бельчонка в одиночку\n" +
                                "2. Может быть он прав и Лисёнок просто паникует->Вернуться домой",
                        "searchSquirrel", "goHome");
                break;

            case "eatAndRest":
                setStep("Поесть немного и передохнуть",
                        "Пока Лисёнок ел, злобные пчёлы вернулись и покусали его. Лисёнку нужна помощь,\n " +
                                "он не сможет продолжить поиски. Игра завершилась неудачей\n",
                        null, null);
                break;

            case "waitBees":
                setStep("Подождать, вдруг пчелы улетят",
                        "Лисёнок подождал немного, и пчёлы разлетелись. Лисёнок без проблем набрал мёда.\n " +
                                "Вдруг он понял, что очень голоден. Что же делать?\n" +
                                "1. Поесть немного и передохнуть\n" +
                                "2. Скорее отнести мёд Медвежонку",
                        "eatAndReast", "honeyForBear");
                break;

            case "getHoney":
                setStep("Нужно воспользоваться шансом и раздобыть мёд",
                        "Лисёнок быстро нашёл мёд, но вокруг летал рой злобных пчел. Лисёнок всегда боялся пчёл,\n " +
                                "но и не найти друга он тоже боялся.\n" +
                                "1. Подождать, вдруг пчёлы улетят\n" +
                                "2. Нужно попытаться выкрасть мёд немедленно",
                        "waitBees", "stealHoney");
                break;

            case "goForest":
                setStep("Поверить Сове и отправиться в глубь леса",
                        "В глубине леса Лисёнок встретил Медвежонка. Ленивый Медвежонок был готов рассказать все,\n " +
                                "что знает, если Лисёнок принесёт ему мёда. \n" +
                                "1. Нет, потрачено слишком много времени, нужно идти дальше->Искать Бельчонка в одиночку\n" +
                                "2. Нужно воспользоваться шансом и раздобыть мёд",
                        "searchSquirrel", "getHoney");
                break;

            case "askWolf":
                setStep("Расспросить волка",
                        "Волк оказался вполне дружелюбным, но помочь не смог. Лишь сказал, что маленькому лисенку \n" +
                                "не стоит бродить по лесу одному. И как теперь поступить?\n" +
                                "1. Волк прав->Вернуться домой\n" +
                                "2. Искать Бельчонка в одиночку",
                        "goHome", "searchSquirrel");
                break;

            case "askOwl":
                setStep("Расспросить сову",
                        "Сова долго не хотела говорить, но в итоге сказала, что видела испуганного Бельчонка,\n " +
                                "бежавшего в глубь леса. Все лесные жители знают, что в глубине леса опасно, если \n" +
                                "Бельчонок там, ему срочно нужна помощь.\n" +
                                "1. Поверить Сове и отправиться в глубь леса\n" +
                                "2. Сове не стоит верить->Искать Бельчонка в одиночку",
                        "goForest", "searchSquirrel");
                break;

            case "askResidents":
                setStep("Попытаться разузнать о Бельчонке у лесных жителей",
                        "Пока Лисёнок принимал решение, лесные жители разошлись кто куда. Остались только Сова и Волк.\n " +
                                "Но у Совы бывают проблемы с памятью, а Волк может сильно разозлиться из-за расспросов.\n " +
                                "Кого выбрать?\n" +
                                "1. Расспросить Сову\n" +
                                "2. Расспросить Волка",
                        "askOwl", "askWolf");
                break;

            case "goSearch":
                setStep("Отправиться на поиски",
                        "Все лесные жители были заняты своими делами и не обращали внимания на Лисёнка и его проблему.\n " +
                                "Но вдруг кто нибудь видел Бельчонка... Лисёнок не знал, что ему делать. Помогите ему.\n" +
                                "1. Попытаться разузнать о Бельчонке у лесных жителей\n" +
                                "2. Искать Бельчонка в одиночку",
                        "askResidents", "searchSquirrel");
                break;

            case "firstFox":
                setStep("Лисенок",
                        "Каждое утро Лисёнок просыпался, завтракал и шёл увидеться с Бельчонком. Это утро не было исключением.\n " +
                                "Лисёнок пришёл на их обычное место встречи, но Бельчонка там не было. Лисёнок ждал, ждал, но так \n" +
                                " и не смог дождаться своего друга. \"Бельчонок не пропустил еще ни одной встречи, вдруг он попал \n" +
                                "в беду.\" - подумал Лисёнок. Как поступить Лисенку?\n" +
                                "1. Вернуться домой \n" +
                                "2. Отправиться на поиски ",
                        "goHome", "goSearch");
                break;

            default:
                break;

        }
    }

    //устанавливаем текущий узел
    public void setStep(String title, String text, String nextFirst, String nextSecond)  {
        this.title=title;
        this.text=text;
        this.nextFirst= nextFirst;
        this.nextSecond= nextSecond;
        printStep();
    }

    public void printStep()  {
        System.out.println("-----------------------------------------------------------------------------");
        System.out.println(this.title + "\n" + this.text);

        System.out.println("3. Сохранить игру \n4. Завершить игру\n5. Начать сначала");

        int num=0;
        Scanner scanner = new Scanner(System.in);
        do{
            if (scanner.hasNextInt()) {
                num = scanner.nextInt();
                if (num<1 || num>5)
                {
                    System.out.println("Введите от 1 до 5!");
                    continue;
                }
            }
            else {
                System.out.println("Неверный ввод! Повторите!");
                continue;
            }
            /*try{
                num = scanner.nextInt();
            } catch (Exception e) {
                System.out.println("Неверный ввод! Повторите!");
                continue;
            }*/
            switch (num){
                case 1:
                    if (nextFirst!=null) new Step(this.nextFirst);
                    break;
                case 2:
                    if (nextSecond!=null) new Step(this.nextSecond);
                    break;
                case 3:
                    //Сохранить игру
                    //передать текущий шаг в сохранение
                    ((SaveGame)Menu.objectCommand(4)).setSaveStep(this);
                    Menu.runCommand(4);
                    break;
                case 4:
                    //Завершить игру
                    Menu.runCommand(3);
                    break;
                case 5:
                    //Начать сначала
                    Menu.runCommand(1);
                    break;
            }
        }while(num<1 || num>5);
    }


}




